#include <PulseSensorBPM.h>
#include <Wire.h> // Must include Wire library for I2C
#include <SparkFun_MMA8452Q.h> // Includes the SFE_MMA8452Q library

MMA8452Q accel;
int valX =0;
int valY =0;
int valZ =0;
const int VM = 3; 
const boolean HAS_A_REF = false;
const int PIN_INPUT = A0;
const int PIN_BLINK = 13;    // Pin 13 is the on-board LED
const int PIN_FADE = 5;      // must be a pin that supports PWM. Can't be pin 3 or 11 (see ISR()).

const unsigned long MICROS_PER_READ = 2 * 1000L;

// PWM steps per fade step.  More fades faster; less fades slower.
const int PWM_STEPS_PER_FADE = 12;

int fadePWM;

PulseSensorBPM pulseDetector(PIN_INPUT, MICROS_PER_READ / 1000L);

/*
 * If true, we've seen a beat that hasn't yet been printed.
 * Set in the ISR.
 * Cleared in loop().
 */
volatile boolean QS;

void setup() {
  /*
   * Use 115200 baud because that's what the Processing Sketch expects to read,
   * and because that speed provides about 11 bytes per millisecond.
   * 
   * If we used a slower baud rate, we'd likely write bytes faster than
   * they can be transmitted, which would mess up the timing
   * of readSensor() calls, which would make the pulse measurement
   * not work properly.
   */
  Serial.begin(115200);
  pinMode(VM,OUTPUT);
  digitalWrite(VM,LOW);
  accel.init();
  // Set up the I/O pins
  
  if (HAS_A_REF) {
    analogReference(EXTERNAL);
  }

  QS = false;
  interruptSetup(); // start the interrupt timer.
}

void loop() {
  if (accel.available())
  {
    accel.read();
    
    valX=accel.x;
    valY=accel.y;
    valZ=accel.z;
//    valY=accel.y;
 //Serial.println(valX);
   
  
  /*
   * Every so often, send the latest Sample to the Processing Sketch.
   * We don't print every sample, because our baud rate
   * won't support that much I/O.
   */

    delay(20);
  
  //Serial.print('S');
  //Serial.println(pulseDetector.getSignal());
    if(valX<700 && valX>0) {
  // If the ISR has seen a beat, print the per-beat information.
  if (QS) {
    fadePWM = 255;  // start fading on the start of each beat.
    analogWrite(PIN_FADE, fadePWM);
    
    Serial.print('B');
    Serial.println(pulseDetector.getBPM());
    int pulse =pulseDetector.getBPM();
    if(pulse>150 || pulse<50 ){
      Serial.println('1');
       digitalWrite(VM,HIGH);
    }
    else{
      digitalWrite(VM,LOW);
    }
    //Serial.print('Q');
    //Serial.println(pulseDetector.getIBI());
    
    QS = false;
  }
   }
   if(valX>2000){
      if (QS) {
    fadePWM = 255;  // start fading on the start of each beat.
    analogWrite(PIN_FADE, fadePWM);
    
    Serial.print('B');
    Serial.println(pulseDetector.getBPM());
    int pulse =pulseDetector.getBPM();
    if(pulse>200 || pulse<150 ){
      Serial.println('2');
       digitalWrite(VM,HIGH);
    }
    else{
      digitalWrite(VM,LOW);
    }
    //Serial.print('Q');
    //Serial.println(pulseDetector.getIBI());
    
    QS = false;
  }  
   }
  }
}

/*
 * Sets up a Timer Interrupt for every 2ms
 */
void interruptSetup(){     
  // Initializes Timer2 to throw an interrupt every 2mS.
  TCCR2A = 0x02;     // DISABLE PWM ON DIGITAL PINS 3 AND 11, AND GO INTO CTC MODE
  TCCR2B = 0x06;     // DON'T FORCE COMPARE, 256 PRESCALER 
  OCR2A = 0X7C;      // SET THE TOP OF THE COUNT TO 124 FOR 500Hz SAMPLE RATE
  TIMSK2 = 0x02;     // ENABLE INTERRUPT ON MATCH BETWEEN TIMER2 AND OCR2A
  sei();             // MAKE SURE GLOBAL INTERRUPTS ARE ENABLED      
}

// THIS IS THE TIMER 2 INTERRUPT SERVICE ROUTINE. 
// Timer 2 makes sure that we take a reading every 2 miliseconds
ISR(TIMER2_COMPA_vect){                    // triggered when Timer2 counts to 124
  cli();                                   // disable interrupts while we do this
  if (pulseDetector.readSensor()) {
    QS = true;
  }
  sei();                                   // enable interrupts when youre done!
}// end isr
